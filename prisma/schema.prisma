// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String      @id @default(cuid())
  name              String?
  bio               String?    @db.Text
  age               Int?
  email             String?     @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  following         Follows[]   @relation("following")
  followers         Follows[]   @relation("follower")
  posts             Post[]      @relation("author")
  comments          Comment[]   @relation("author")
  likes             Like[]      @relation("user")
  sessions          Session[]
  messages          Message[]   @relation("sender")
  chatRooms         ChatRoom[]  @relation("chatRooms")
}

model Follows {
  followerId    String 
  followingId   String 
  follower      User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following     User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Post {
  id                String     @id @default(cuid())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  body              String     
  authorId          String
  author            User       @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  likes             Like[]     @relation("post")
  comments          Comment[]  @relation("post")
}

model Message {
  id         String   @id @default(cuid())
  createdAt         DateTime   @default(now())
  content    String
  senderId   String
  sender     User     @relation("sender", fields: [senderId], references: [id])
  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
}

model ChatRoom {
  id      String    @id @default(cuid())
  name    String
  users   User[]    @relation("chatRooms")
  messages Message[]
}

model Comment {
  id                String     @id @default(cuid())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  body              String    
  authorId          String
  postId            String
  Post              Post       @relation("post", fields: [postId], references: [id], onDelete: Cascade)
  author            User       @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  likes             Like[]     @relation("comment")
}

model Like {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  postId        String?
  post          Post?      @relation("post", fields: [postId], references: [id], onDelete: Cascade)
  commentId     String?
  comment       Comment?   @relation("comment", fields: [commentId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

